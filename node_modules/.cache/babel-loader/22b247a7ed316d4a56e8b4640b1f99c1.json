{"ast":null,"code":"import _defineProperty from \"/Users/Vishal/Desktop/dentira/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_TREE, ADD_NODE } from '../action/constant';\nconst INITIAL_STATE = {};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FETCH_TREE:\n      return _objectSpread({}, state, {\n        tree: action.payload\n      });\n\n    case ADD_NODE:\n      return _objectSpread({}, state, {\n        tree: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/Vishal/Desktop/dentira/src/reducer/reducer.js"],"names":["FETCH_TREE","ADD_NODE","INITIAL_STATE","state","action","type","tree","payload"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAoBC,QAApB,QAAmC,oBAAnC;AAEA,MAAMC,aAAa,GAAG,EAAtB;AAGA,gBAAe,CAACC,KAAK,GAAED,aAAR,EAAuBE,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,UAAL;AACE,+BAAWG,KAAX;AAAkBG,QAAAA,IAAI,EAAGF,MAAM,CAACG;AAAhC;;AACF,SAAKN,QAAL;AACE,+BAAWE,KAAX;AAAkBG,QAAAA,IAAI,EAAGF,MAAM,CAACG;AAAhC;;AACF;AACE,aAAOJ,KAAP;AANJ;AAQD,CATH","sourcesContent":["import {FETCH_TREE, ADD_NODE} from '../action/constant';\n\nconst INITIAL_STATE = {};\n\n\nexport default (state =INITIAL_STATE, action) => {\n    switch (action.type) {\n      case FETCH_TREE:\n        return {...state, tree : action.payload};\n      case ADD_NODE :\n        return {...state, tree : action.payload};\n      default:\n        return state;\n    }\n  };"]},"metadata":{},"sourceType":"module"}