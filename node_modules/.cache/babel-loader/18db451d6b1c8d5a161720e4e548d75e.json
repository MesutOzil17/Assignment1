{"ast":null,"code":"var _jsxFileName = \"/Users/Vishal/Desktop/dentira/src/Component/Item.js\";\nimport React, { Component } from \"react\";\nimport \"./index.css\";\nimport NodeItem from \"./NodeItem\";\nimport { generateUniqueId } from \"../utils/helper\";\nimport { cloneDeep } from \"lodash\";\nexport default class Node extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isExpanded: false,\n      tree: this.props.tree,\n      clickedNode: false\n    };\n\n    this.splitId = combinedId => combinedId.match(/.{3}/g);\n\n    this.toggleExpansion = combinedId => {\n      const tree = this.props.tree;\n      const nodeIds = combinedId.match(/.{3}/g);\n\n      const searchNodeIndex = (children, id) => {\n        return children.findIndex(item => item.id === id);\n      };\n\n      const modifyNode = (root, level) => {\n        let si = searchNodeIndex(root, nodeIds[level]);\n\n        if (level === nodeIds.length - 1) {\n          root[si].isExpanded = !root[si].isExpanded;\n          return root;\n        }\n\n        return modifyNode(root[si].children, level + 1);\n      };\n\n      modifyNode(tree, 0);\n      this.setState({\n        tree\n      });\n    };\n\n    this.searchNodeIndex = (children, id) => {\n      return children.findIndex(item => item.id === id);\n    };\n\n    this.addChild = combinedId => title => {\n      const _this$props = this.props,\n            tree = _this$props.tree,\n            updateTree = _this$props.updateTree;\n      const temptree = cloneDeep(tree);\n      const nodeIds = combinedId.match(/.{3}/g);\n\n      const modifyNode = (root, level) => {\n        let si = this.searchNodeIndex(root, nodeIds[level]);\n\n        if (level === nodeIds.length - 1) {\n          const newNode = {\n            id: generateUniqueId(),\n            title,\n            isExpanded: false,\n            children: []\n          };\n          root[si].children.push(newNode);\n          return root;\n        }\n\n        return modifyNode(root[si].children, level + 1);\n      };\n\n      modifyNode(temptree, 0);\n      updateTree(temptree);\n    };\n\n    this.renderTree = (root, combinedId) => {\n      const ids = this.splitId(combinedId) || [];\n      return root.map(node => React.createElement(\"div\", {\n        key: node.id,\n        style: {\n          marginLeft: 30\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(NodeItem, {\n        level: ids.length - 1,\n        node: node,\n        marginLeft: ids.length ? 30 : 0,\n        toggleExpansion: () => this.toggleExpansion(combinedId + node.id),\n        addChild: this.addChild(combinedId + node.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), node.isExpanded && this.renderTree(node.children, combinedId + node.id)));\n    };\n  }\n\n  render() {\n    const tree = this.props.tree;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, tree.length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.renderTree(tree, \"\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/Vishal/Desktop/dentira/src/Component/Item.js"],"names":["React","Component","NodeItem","generateUniqueId","cloneDeep","Node","state","isExpanded","tree","props","clickedNode","splitId","combinedId","match","toggleExpansion","nodeIds","searchNodeIndex","children","id","findIndex","item","modifyNode","root","level","si","length","setState","addChild","title","updateTree","temptree","newNode","push","renderTree","ids","map","node","marginLeft","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./index.css\";\nimport NodeItem from \"./NodeItem\";\nimport { generateUniqueId } from \"../utils/helper\";\nimport { cloneDeep } from \"lodash\";\n\nexport default class Node extends Component {\n    state = {\n        isExpanded: false,\n        tree: this.props.tree,\n        clickedNode: false\n    };\n\n    splitId = combinedId => combinedId.match(/.{3}/g);\n\n    toggleExpansion = combinedId => {\n        const { tree } = this.props;\n        const nodeIds = combinedId.match(/.{3}/g);\n        const searchNodeIndex = (children, id) => {\n            return children.findIndex(item => item.id === id);\n        };\n\n        const modifyNode = (root, level) => {\n            let si = searchNodeIndex(root, nodeIds[level]);\n            if (level === nodeIds.length - 1) {\n                root[si].isExpanded = !root[si].isExpanded;\n                return root;\n            }\n            return modifyNode(root[si].children, level + 1);\n        };\n\n        modifyNode(tree, 0);\n        this.setState({ tree });\n    };\n\n    searchNodeIndex = (children, id) => {\n        return children.findIndex(item => item.id === id);\n    };\n\n    addChild = combinedId => title => {\n        const { tree, updateTree } = this.props;\n        const temptree = cloneDeep(tree);\n        const nodeIds = combinedId.match(/.{3}/g);\n\n        const modifyNode = (root, level) => {\n            let si = this.searchNodeIndex(root, nodeIds[level]);\n            if (level === nodeIds.length - 1) {\n                const newNode = {\n                    id: generateUniqueId(),\n                    title,\n                    isExpanded: false,\n                    children: []\n                };\n                root[si].children.push(newNode);\n                return root;\n            }\n            return modifyNode(root[si].children, level + 1);\n        };\n        modifyNode(temptree, 0);\n        updateTree(temptree);\n    };\n\n    renderTree = (root, combinedId) => {\n        const ids = this.splitId(combinedId) || [];\n        return root.map(node => (\n            <div key={node.id} style={{ marginLeft: 30 }}>\n                <NodeItem\n                    level={ids.length - 1}\n                    node={node}\n                    marginLeft={ids.length ? 30 : 0}\n                    toggleExpansion={() => this.toggleExpansion(combinedId + node.id)}\n                    addChild={this.addChild(combinedId + node.id)}\n                />\n                {node.isExpanded && this.renderTree(node.children, combinedId + node.id)}\n            </div>\n        ));\n    };\n\n    render() {\n        const { tree } = this.props;\n        return <div>{tree.length > 0 && <div>{this.renderTree(tree, \"\")}</div>}</div>;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}