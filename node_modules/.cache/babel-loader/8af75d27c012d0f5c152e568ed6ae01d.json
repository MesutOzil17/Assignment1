{"ast":null,"code":"var _jsxFileName = \"/Users/Vishal/Desktop/dentira/src/Component/Node.js\";\nimport React, { Component } from \"react\";\nimport caretRight from \"../assets/images/caret-right.jpg\";\nimport caretDown from \"../assets/images/caret-down.png\";\nimport \"./index.css\"; //id will be random 4 digit string\n\nconst tree = [{\n  id: \"111\",\n  title: \"ABC\",\n  isExpanded: false,\n  children: [{\n    id: \"123\",\n    title: \"XYZ\",\n    isExpanded: false,\n    children: [{\n      id: \"456\",\n      title: \"123\",\n      isExpanded: false,\n      children: [{\n        title: \"456\",\n        isExpanded: false,\n        children: []\n      }, {\n        title: \"456\",\n        isExpanded: false,\n        children: []\n      }]\n    }, {\n      title: \"456\",\n      isExpanded: false,\n      children: []\n    }]\n  }, {\n    title: \"EFG\",\n    isExpanded: false,\n    children: []\n  }]\n}, {\n  title: \"DEF\",\n  isExpanded: false,\n  children: []\n}];\nexport default class Node extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isExpanded: false,\n      tree: tree\n    };\n\n    this.splitId = combinedId => combinedId.match(/.{3}/g);\n\n    this.toggleExpansion = (title, combinedId) => {\n      const tree = this.state.tree;\n      console.log(combinedId);\n      const nodeIds = combinedId.match(/.{3}/g);\n\n      const searchNodeIndex = (children, id) => {\n        return children.findIndex(item => item.id === id);\n      };\n\n      const modifyNode = (root, level) => {\n        let si = searchNodeIndex(root, nodeIds[level]);\n\n        if (level === nodeIds.length - 1) {\n          root[si].isExpanded = !root[si].isExpanded;\n          return root;\n        }\n\n        return modifyNode(root[si].children, level + 1);\n      };\n\n      modifyNode(tree, 0);\n      this.setState({\n        tree\n      });\n    };\n\n    this.renderTree = (root, combinedId) => {\n      const ids = this.splitId(combinedId) || [];\n      return root.map(node => React.createElement(\"div\", {\n        key: node.id,\n        style: {\n          marginLeft: 30\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(NodeItem, {\n        level: ids.length - 1,\n        node: node,\n        marginLeft: ids.length ? 30 : 0,\n        toggleExpansion: () => this.toggleExpansion(node.title, combinedId + node.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), node.isExpanded && this.renderTree(node.children, combinedId + node.id)));\n    };\n  }\n\n  render() {\n    const tree = this.state.tree;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.renderTree(tree, \"\"));\n  }\n\n}\n\nconst NodeItem = props => {\n  const node = props.node,\n        toggleExpansion = props.toggleExpansion,\n        level = props.level;\n  const icon = node.isExpanded ? caretDown : caretRight;\n  const style = node.isExpanded ? {\n    marginRight: 13\n  } : null;\n  const textStyle = node.children.length > 0 ? null : {\n    marginLeft: \"28px\"\n  };\n  return (// style={{ marginLeft: `${marginLeft}px` }}\n    React.createElement(\"div\", {\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, level > 0 && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"|\"), node.children.length > 0 && React.createElement(\"img\", {\n      hand: true,\n      onClick: toggleExpansion,\n      style: style,\n      className: \"caret\",\n      src: icon,\n      alt: \"caret\",\n      height: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: textStyle,\n      className: \"mx-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, node.title))\n  );\n};","map":{"version":3,"sources":["/Users/Vishal/Desktop/dentira/src/Component/Node.js"],"names":["React","Component","caretRight","caretDown","tree","id","title","isExpanded","children","Node","state","splitId","combinedId","match","toggleExpansion","console","log","nodeIds","searchNodeIndex","findIndex","item","modifyNode","root","level","si","length","setState","renderTree","ids","map","node","marginLeft","render","NodeItem","props","icon","style","marginRight","textStyle"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport caretRight from \"../assets/images/caret-right.jpg\";\nimport caretDown from \"../assets/images/caret-down.png\";\nimport \"./index.css\";\n\n//id will be random 4 digit string\n\nconst tree = [\n    {\n        id: \"111\",\n        title: \"ABC\",\n        isExpanded: false,\n        children: [\n            {\n                id: \"123\",\n                title: \"XYZ\",\n                isExpanded: false,\n                children: [\n                    {\n                        id: \"456\",\n                        title: \"123\",\n                        isExpanded: false,\n                        children: [\n                            {\n                                title: \"456\",\n                                isExpanded: false,\n                                children: []\n                            },\n                            {\n                                title: \"456\",\n                                isExpanded: false,\n                                children: []\n                            }\n                        ]\n                    },\n                    {\n                        title: \"456\",\n                        isExpanded: false,\n                        children: []\n                    }\n                ]\n            },\n            {\n                title: \"EFG\",\n                isExpanded: false,\n                children: []\n            }\n        ]\n    },\n    {\n        title: \"DEF\",\n        isExpanded: false,\n        children: []\n    }\n];\n\nexport default class Node extends Component {\n    state = {\n        isExpanded: false,\n        tree: tree\n    };\n\n    splitId = combinedId => combinedId.match(/.{3}/g);\n\n    toggleExpansion = (title, combinedId) => {\n        const { tree } = this.state;\n\n        console.log(combinedId);\n        const nodeIds = combinedId.match(/.{3}/g);\n        const searchNodeIndex = (children, id) => {\n            return children.findIndex(item => item.id === id);\n        };\n\n        const modifyNode = (root, level) => {\n            let si = searchNodeIndex(root, nodeIds[level]);\n            if (level === nodeIds.length - 1) {\n                root[si].isExpanded = !root[si].isExpanded;\n                return root;\n            }\n            return modifyNode(root[si].children, level + 1);\n        };\n\n        modifyNode(tree, 0);\n        this.setState({ tree });\n    };\n\n    renderTree = (root, combinedId) => {\n        const ids = this.splitId(combinedId) || [];\n        return root.map(node => (\n            <div key={node.id} style={{ marginLeft: 30 }}>\n                <NodeItem\n                    level={ids.length - 1}\n                    node={node}\n                    marginLeft={ids.length ? 30 : 0}\n                    toggleExpansion={() => this.toggleExpansion(node.title, combinedId + node.id)}\n                />\n                {node.isExpanded && this.renderTree(node.children, combinedId + node.id)}\n            </div>\n        ));\n    };\n\n    render() {\n        const { tree } = this.state;\n\n        return <div>{this.renderTree(tree, \"\")}</div>;\n    }\n}\n\nconst NodeItem = props => {\n    const { node, toggleExpansion, level } = props;\n    const icon = node.isExpanded ? caretDown : caretRight;\n    const style = node.isExpanded ? { marginRight: 13 } : null;\n    const textStyle = node.children.length > 0 ? null : { marginLeft: \"28px\" };\n    return (\n        // style={{ marginLeft: `${marginLeft}px` }}\n        <div className=\"node\">\n            {level > 0 && <span>|</span>}\n            {node.children.length > 0 && (\n                <img\n                    hand\n                    onClick={toggleExpansion}\n                    style={style}\n                    className=\"caret\"\n                    src={icon}\n                    alt=\"caret\"\n                    height={14}\n                ></img>\n            )}\n            <span style={textStyle} className=\"mx-10\">\n                {node.title}\n            </span>\n        </div>\n    );\n};"]},"metadata":{},"sourceType":"module"}