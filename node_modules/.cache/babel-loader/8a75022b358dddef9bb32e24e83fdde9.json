{"ast":null,"code":"import _defineProperty from \"/Users/Vishal/Desktop/dentira/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { UPDATE_TREE, ADD_NODE } from \"../action/constant\";\nimport { cloneDeep } from \"lodash\";\nconst INITIAL_STATE = {\n  tree: []\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case UPDATE_TREE:\n      return _objectSpread({}, state, {\n        tree: cloneDeep(action.payload)\n      });\n\n    case ADD_NODE:\n      const newTree = cloneDeep(state.tree);\n      newTree.push(action.payload);\n      return _objectSpread({}, state, {\n        tree: newTree\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/Vishal/Desktop/dentira/src/reducer/reducer.js"],"names":["UPDATE_TREE","ADD_NODE","cloneDeep","INITIAL_STATE","tree","state","action","type","payload","newTree","push"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,oBAAtC;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,MAAMC,aAAa,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAtB;AAEA,gBAAe,CAACC,KAAK,GAAGF,aAAT,EAAwBG,MAAxB,KAAmC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAL;AACI,+BAAYK,KAAZ;AAAmBD,QAAAA,IAAI,EAAEF,SAAS,CAACI,MAAM,CAACE,OAAR;AAAlC;;AACJ,SAAKP,QAAL;AACI,YAAMQ,OAAO,GAAGP,SAAS,CAACG,KAAK,CAACD,IAAP,CAAzB;AACAK,MAAAA,OAAO,CAACC,IAAR,CAAaJ,MAAM,CAACE,OAApB;AACA,+BAAYH,KAAZ;AAAmBD,QAAAA,IAAI,EAAEK;AAAzB;;AACJ;AACI,aAAOJ,KAAP;AARR;AAUH,CAXD","sourcesContent":["import { UPDATE_TREE, ADD_NODE } from \"../action/constant\";\nimport { cloneDeep } from \"lodash\";\n\nconst INITIAL_STATE = { tree: [] };\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case UPDATE_TREE:\n            return { ...state, tree: cloneDeep(action.payload) };\n        case ADD_NODE:\n            const newTree = cloneDeep(state.tree);\n            newTree.push(action.payload);\n            return { ...state, tree: newTree };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}